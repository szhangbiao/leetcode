/*
 * @lc app=leetcode.cn id=19 lang=kotlin
 *
 * [19] 删除链表的倒数第 N 个结点
 *
 * https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/
 *
 * algorithms
 * Medium (46.94%)
 * Likes:    2814
 * Dislikes: 0
 * Total Accepted:    1.3M
 * Total Submissions: 2.8M
 * Testcase Example:  '[1,2,3,4,5]\n2'
 *
 * 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：head = [1,2,3,4,5], n = 2
 * 输出：[1,2,3,5]
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：head = [1], n = 1
 * 输出：[]
 * 
 * 
 * 示例 3：
 * 
 * 
 * 输入：head = [1,2], n = 1
 * 输出：[1]
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 链表中结点的数目为 sz
 * 1 <= sz <= 30
 * 0 <= Node.val <= 100
 * 1 <= n <= sz
 * 
 * 
 * 
 * 
 * 进阶：你能尝试使用一趟扫描实现吗？
 * 
 */

// @lc code=start
/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    var deep = 0
    fun removeNthFromEnd(head: ListNode?, n: Int): ListNode? {
        val dummy = ListNode(-1, head)
        dfs(dummy, n)
        return dummy?.next
    }

    fun dfs(head: ListNode?, n: Int){
        if(head == null) return
        dfs(head.next, n)
        if(deep == n){
            head?.next = head?.next?.next
        }
        deep++
    }
    
    fun removeNthFromEnd1(head: ListNode?, n: Int): ListNode? {
        var cur = head
        var len = 0
        while(cur != null){
            cur = cur?.next
            len++
        }
        val dummy = ListNode(-1, head)
        cur = dummy
        for(i in 0 until (len - n)){
            cur = cur?.next
        }
        cur?.next = cur?.next?.next
        return dummy.next
    }
}
// @lc code=end

